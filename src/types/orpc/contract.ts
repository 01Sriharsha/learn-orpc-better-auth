// Auto-generated types from server routes
// Do not edit this file manually - it will be overwritten

import { z } from "zod";
import {
  LoginSchema,
  OnBoardOAuthUserSchema,
  OnBoardUserSchema,
  VerifyEmailOTPSchema,
  VerifyPhoneOTPSchema,
} from "@/schemas/auth";

// Base response schemas
const BaseResponseSchema = z.object({
  message: z.string(),
});

const BaseResponseWithDataSchema = BaseResponseSchema.extend({
  data: z.any().optional(),
});

// Generated route types
export interface AuthContract {
  hello: {
    method: "GET";
    path: "/auth/hello";
    input: void;
    output: z.infer<typeof BaseResponseSchema>;
  };

  login: {
    method: "POST";
    path: "/auth/login";
    input: z.infer<typeof LoginSchema>;
    output: z.infer<typeof BaseResponseSchema>;
  };

  verifyLoginPhoneOTP: {
    method: "POST";
    path: "/verifyLoginPhoneOTP";
    input: z.infer<typeof VerifyPhoneOTPSchema>;
    output: z.infer<typeof BaseResponseWithDataSchema>;
  };

  onBoardUser: {
    method: "POST";
    path: "/auth/onboard";
    input: z.infer<typeof OnBoardUserSchema>;
    output: z.infer<typeof BaseResponseSchema>;
  };

  verifyOnboardEmailOTP: {
    method: "POST";
    path: "/auth/onboard-verify";
    input: z.infer<typeof VerifyEmailOTPSchema>;
    output: z.infer<typeof BaseResponseWithDataSchema>;
  };

  onBoardOAuthUser: {
    method: "POST";
    path: "/auth/onboard-oauth";
    input: z.infer<typeof OnBoardOAuthUserSchema>;
    output: z.infer<typeof BaseResponseSchema>;
  };

  verifyOnboardPhoneOTP: {
    method: "POST";
    path: "/auth/onboard-oauth-verify";
    input: z.infer<typeof VerifyPhoneOTPSchema>;
    output: z.infer<typeof BaseResponseWithDataSchema>;
  };

  me: {
    method: "GET";
    path: "/auth/me";
    input: void;
    output: z.infer<typeof BaseResponseWithDataSchema>;
  };

}

// Main contract interface
export interface ORPCContract {
  auth: AuthContract;
}

// Helper types for type inference
export type AuthRoutes = keyof AuthContract;
export type AuthRoute<T extends AuthRoutes> = AuthContract[T];
export type AuthInput<T extends AuthRoutes> = AuthContract[T]["input"];
export type AuthOutput<T extends AuthRoutes> = AuthContract[T]["output"];

// Export the contract as a type
export type Routes = ORPCContract;

// Re-export schema types for convenience
export type {
  LoginSchema,
  OnBoardOAuthUserSchema,
  OnBoardUserSchema,
  VerifyEmailOTPSchema,
  VerifyPhoneOTPSchema,
} from "@/schemas/auth";
